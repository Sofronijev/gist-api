{"version":3,"sources":["components/Header/Header.js","components/List/List.js","components/Pagination/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Header","List","pageNum","setPageNum","useState","isLoading","setIsLoading","listData","setListData","selectedRow","setSelectedRow","errorMsg","setErrorMsg","centerImage","useRef","useEffect","window","scrollTo","fetch","then","response","ok","json","Error","data","error","addEventListener","ev","state","page_num","removeEventListener","message","className","map","gist","fileNames","Object","keys","files","id","undefined","onClick","image","img","current","style","display","setTimeout","changeSelectedRow","owner","avatar_url","src","alt","displayGists","ref","Pagination","pageInput","setPageInput","showPageInput","setShowPageInput","lastPage","currentPage","changePageNum","page","history","pushState","htmlFor","name","type","value","onChange","e","target","test","parseInt","trim","number","isNaN","currState","currNum","App","replaceState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6222a179.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.scss'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <h5>Gists</h5>\r\n        </header>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport './List.scss'\r\n\r\nexport default function List({ pageNum, setPageNum }) {\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [listData, setListData] = useState([])\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n    const [errorMsg, setErrorMsg] = useState(\"\")\r\n    const centerImage = useRef(null)\r\n\r\n    useEffect(() => {\r\n        //setLoading between pages\r\n        setIsLoading(true)\r\n        //scroll to the top off the page when page changes\r\n        window.scrollTo(0, 0)\r\n        //clear selected row state\r\n        setSelectedRow({})\r\n        fetch(`https://api.github.com/gists/public?per_page=30&page=${pageNum}&since=2021-04-18T07:35:13Z`)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json()\r\n                } else {\r\n                    // error if API rate limit exceeded\r\n                    throw new Error(\"Something went wrong\")\r\n                }\r\n            })\r\n            .then(data => {\r\n                setListData(data)\r\n                setIsLoading(false)\r\n            },\r\n                (error) => {\r\n                    setIsLoading(false)\r\n                    setErrorMsg(error)\r\n                }\r\n            )\r\n    }, [pageNum])\r\n\r\n    //handles browsers back button\r\n    useEffect(() => {\r\n        window.addEventListener(\"popstate\", ev => {\r\n            if (ev.state !== null) {\r\n                setPageNum(ev.state.page_num)\r\n            }\r\n        })\r\n        return () => {\r\n            window.removeEventListener(\"popstate\", ev => {\r\n                if (ev.state !== null) {\r\n                    setPageNum(ev.state.page_num)\r\n                }\r\n            })\r\n        }\r\n    }, [setPageNum])\r\n\r\n    const changeSelectedRow = (id, image) => {\r\n        setSelectedRow({ id, image })\r\n        //shows animation and removes element after 1 s               \r\n        const img = centerImage.current\r\n        img.style.display = \"block\"\r\n        img.className = img.className + \" animateFade\"\r\n        setTimeout(() => {\r\n            img.className = \"img-container\"\r\n            img.style.display = \"none\"\r\n        }, 1000)\r\n    }\r\n\r\n    const displayGists = () => {\r\n        if (!isLoading) {\r\n            return listData.map(gist => {\r\n                //using only first file in files object name\r\n                const fileNames = Object.keys(gist.files)[0]\r\n                return <li\r\n                    key={gist.id}\r\n                    className={selectedRow.id === gist.id ? \"selected\" : undefined}\r\n                    onClick={() => changeSelectedRow(gist.id, gist.owner.avatar_url)} >\r\n                    <img\r\n                        src={gist.owner.avatar_url}\r\n                        alt=\"avatar_img\"\r\n                    >\r\n                    </img>\r\n                    <span>{fileNames}</span>\r\n                </li>\r\n            })\r\n        }\r\n    }\r\n\r\n    if (errorMsg) {\r\n        return <p>{errorMsg.message}</p>\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            {isLoading ?\r\n                <p className=\"loading\">Loading...</p> :\r\n                <ul>\r\n                    {displayGists()}\r\n                </ul>}\r\n            <div className=\"img-container\" ref={centerImage}>\r\n                <img\r\n                    src={selectedRow.image}\r\n                    alt=\"avatar_img\"\r\n                    className={\"fadeImage\"}\r\n                >\r\n                </img>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport './Pagination.scss'\r\n\r\nexport default function Pagination({ pageNum, setPageNum }) {\r\n\r\n    const [pageInput, setPageInput] = useState(\"\")\r\n    const [showPageInput, setShowPageInput] = useState(\"\")\r\n\r\n\r\n    //first and last page in pagination, maximum number of fetched gists can be 3000   \r\n    const firstPage = 1\r\n    const lastPage = 100\r\n    //other pages in pagination\r\n    const currentPage = pageNum > lastPage - 2 ? lastPage - 2 : pageNum === 1 ? 2 : pageNum\r\n    const nextToLastPage = lastPage - 1\r\n    \r\n    const changePageNum = (page) => {\r\n        setPageNum(page)\r\n        window.history.pushState({ page_num: page }, '', page)\r\n    }\r\n\r\n    const handlePageInput = (e) => {\r\n        const { value } = e.target;\r\n        const numRegex = /^\\d+$/\r\n        if (numRegex.test(value) || value === \"\") {\r\n            if (parseInt(value) <= 0 || parseInt(value) > 100) {\r\n                return\r\n            }\r\n            setPageInput(value)\r\n        }\r\n    }\r\n\r\n    const handleSearch = () => {\r\n        if (pageInput.trim() !== \"\") {\r\n            const number = parseInt(pageInput)\r\n            if (!isNaN(number)) {\r\n                changePageNum(number)\r\n                setShowPageInput(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    const showInput = () => {\r\n        setShowPageInput(currState => !currState)\r\n        setPageInput(\"\")\r\n    }\r\n\r\n    //Page change is pushed in history so user can use back button in browser\r\n    const nextPage = () => {\r\n        //For 30 rows per page, max number of pages are 100\r\n        setPageNum(currNum => currNum === 100 ? 100 : currNum + 1)\r\n        window.history.pushState({ page_num: pageNum === 100 ? 100 : pageNum + 1 }, '', pageNum === 100 ? 100 : pageNum + 1)\r\n    }\r\n    const prevPage = () => {\r\n        //Page number can't be 0 or negative number\r\n        setPageNum(currNum => currNum === 1 ? 1 : currNum - 1)\r\n        window.history.pushState({ page_num: pageNum === 1 ? 1 : pageNum - 1 }, '', pageNum === 1 ? 1 : pageNum - 1)\r\n    }\r\n    return (\r\n        <div className=\"pagination\">\r\n            <div className=\"paginationNumbers\">\r\n                <span onClick={() => changePageNum(firstPage)} className={pageNum === firstPage ? \"currentPage\" : undefined}>{firstPage} </span>\r\n                <span onClick={() => changePageNum(currentPage)} className={pageNum === currentPage ? \"currentPage\" : undefined}>{currentPage} </span>\r\n                <div className=\"dropdown\">\r\n                    <div className=\"dropdown-content\" style={{ display: showPageInput ? \"inline-block\" : \"none\" }}>\r\n                        <label htmlFor=\"pageNumber\">Page:</label>\r\n                        <input id=\"pageNumber\" name=\"pageNumber\" type=\"text\" value={pageInput} onChange={handlePageInput}></input>\r\n                        <button type=\"button\" onClick={handleSearch}>go</button>\r\n                    </div>\r\n                    <span onClick={showInput} >... </span>\r\n                </div>\r\n                <span onClick={() => changePageNum(nextToLastPage)} className={pageNum === nextToLastPage ? \"currentPage\" : undefined}> {nextToLastPage} </span>\r\n                <span onClick={() => changePageNum(lastPage)} className={pageNum === lastPage ? \"currentPage\" : undefined}>{lastPage} </span>\r\n            </div>\r\n            <button type=\"button\" onClick={prevPage}>&#8249;</button>\r\n            <button type=\"button\" onClick={nextPage}>&#8250;</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { useState, useEffect } from 'react'\nimport './App.scss'\nimport Header from './components/Header/Header'\nimport List from './components/List/List'\nimport Pagination from './components/Pagination/Pagination'\n\nconst initialState = 2\n\nfunction App() {\n\n  const [pageNum, setPageNum] = useState(initialState)\n\n  useEffect(() => {\n    //sets hystory when app mounts first time, used replaceState so its first item in history\n    window.history.replaceState({ page_num: initialState }, '', initialState)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <List\n        pageNum={pageNum}\n        setPageNum={setPageNum}\n      />\n      <Pagination\n        pageNum={pageNum}\n        setPageNum={setPageNum}\n      />\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}